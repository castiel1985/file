（1）核心指令：
1.root:
	指定具体的解析位置
2.alias:
	目录别名 （root与alias主要区别在于nginx如何解释location后面的uri，这会使两者分别以不同的方式将请求映射到服务器文件上。
root的处理结果是：root路径＋location路径
alias的处理结果是：使用alias路径替换location路径）
location ^~ /t/ {
 alias /www/root/html/new_t/;
}
如果一个请求的URI是/t/a.html时，web服务器将会返回服务器上的/www/root/html/new_t/a.html的文件。

3.error_page:
 error_page   502 503 504  /50x.html;
指定具体的错误页

4.internal ，限制访问Web 公共目录下的图片等资源文件被任意用户直接访问。
location  /404.html {
  internal;

}

5.index 依次寻找根目录下面的index页面，找不到，只能输出错误页
	autoindex on 设置的话，则会自动生成目录索引

6.include  包含同目录下的相关配置文档

7.keepalive_timeout  一个请求完成之后还要保持连接多久，不是请求时间多久，目的是保持长连接，减少创建连接过程给系统带来的性能损耗，类似于线程池，数据库连接池。


8.keepalive_requests  每个连接最大请求数量

注明：7和8 这两个是配置长连接的
	服务为什么使用HTTPs长连接技术？有如下几个原因：
	对响应时间要求较高；
	服务走的是公网，客户端与服务端的TCP建立的三次握手和断开的四次握手都需要40ms左右(真实数据包计算出来的)，共需要80ms左右；
	每个接入方使用的IP就若干个，需要建立的请求连接有限。
	使用长连接技术，可以大幅减少TCP频繁握手的次数，极大提高响应时间；同时，即使使用长连接技术，也不需要消耗很多的系统资源用来缓存sockets会话信息。

9.default_type	默认回应客户请求的类型，一般从mine.type中的映射获取
比如：
	 application/octet-stream 这个类型会让浏览器认为响应是普通的文件流，并提示用户下载文件。

10.listen
监听的IP和端口


11.send_timeout ：服务端向客户端传输数据的超时时间。


12.sendfile:	指定是否使用sendfile系统调用来传输文件。默认为关闭off
sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝。


13. 异步参数： directio  和 aio
directio 直接I/O，其从应用程序到磁盘直接读取和写入，从而绕过所有操作系统缓存。 这使得更好地利用CPU周期和提高缓存效率。
该方法用于数据具有较差命中率的地方。 这样的数据不需要在任何高速缓存中，并且可以在需要时加载。 它可以用于提供大文件。 directio指令启用该功能。 该指令可用于http，server和location区块：

location /video/ {
     directio 4m;
     directio_alignment 512;
}

directio_alignment指令来设置块大小。

异步I/O允许进程进行不受阻塞或不需要等待I/O完成的I/O操作。
aio命令可在NGINX配置的http，server和location区块下使用。 根据在指令所在区块，该指令将为匹配的请求执行异步I/O。 该参数适用于Linux内核2.6.22+和FreeBSD 4.3
location /data {
     aio on;
} 这是普通正常使用。
        autoindex on 设置的话，则会
在NGINX全局上下文中使用thread_pool指令添加一个线程池。 在aio配置中使用该线程池：

thread_pool io_pool threads=16;
   http{
   ........
      location /data{
        sendfile    on;
        aio        threads=io_pool;
} }



14.吞吐量参数：
	client_max_body_size: 客户上传文件最大值
	client_body_buffer_size：设置用于请求主体的缓冲区大小。 如果主体超过缓冲区大小，则完整主体或其一部分将写入临时文件。 如果NGINX配置为使用文件而不是内存缓冲区，则该指令会被忽略。 默认情况下，该指令为32位系统设置一个8k缓冲区，为64位系统设置一个16k缓冲区。 该指令在NGINX配置的http，server和location区块使用。
	client_body_in_file_only：禁用NGINX缓冲区并将请求体存储在临时文件中，可选值有：
		off:该值将禁用文件写入
		clean：请求body将被写入文件。 该文件将在处理请求后删除。
		on: 请求正文将被写入文件。 处理请求后，将不会删除该文件。默认情况下，指令值为关闭
  
	client_body_in_single_buffer：设置NGINX将完整的请求主体存储在单个缓冲区中。 默认情况下，指令值为off。 如果启用，它将优化读取$request_body变量时涉及的I/O操作。
	client_header_buffer_size：为请求头分配一个缓冲区。 如果请求头大小大于指定的缓冲区，则使用large_client_header_buffers指令分配更大的缓冲区。
	large_client_header_buffers：规定了用于读取大型客户端请求头的缓冲区的最大数量和大小。 这些缓冲区仅在缺省缓冲区不足时按需分配。 当处理请求或连接转换到保持活动状态时，释放缓冲区。
	client_body_temp_path:此指令指定存储请求正文的临时文件的位置。 除了位置之外，指令还可以指定文件是否需要最多三个级别的文件夹层次结构。 级别指定为用于生成文件夹的位数。默认情况下，NGINX在NGINX安装路径下的client_body_temp文件夹创建临时文件。 如下例子：
	server{
      		client_body_temp_pathtemp_files 1 2;
      }
	该指令生成的文件路径如temp_files/1/05/0000003051。







(2)主要模块：
http模块:包含所有的server模块，为NGINX的核心内容所在,
	access_log设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快(aka,YOLO)。
	error_log 告诉nginx只能记录严重的错误。
	tcp_nopush 告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送
	tcp_nodelay 告诉nginx不要缓存数据，而是一段一段的发送–当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。
	send_timeout 指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
	reset_timeout_connection告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
	charset设置我们的头文件中的默认的字符集。
	压缩参数：
	gzip是告诉nginx采用gzip压缩的形式发送数据。这将会减少我们发送的数据量。
	gzip_disable为指定的客户端禁用gzip功能。我们设置成IE6或者更低版本以使我们的方案能够广泛兼容。
	gzip_static告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。这要求你预先压缩你的文件（在这个例子中被注释掉了），从而允许你使用最高压缩比，这样nginx就不用再压缩这些文件了（想要更详尽的gzip_static的信息，请点击这里）。
	gzip_proxied允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。
	gzip_min_length设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。
	gzip_comp_level设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。我们设置为4，这是一个比较折中的设置。
	gzip_type设置需要压缩的数据格式。
	缓存参数：
	open_file_cache打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。
	open_file_cache_valid 在open_file_cache中指定检测正确信息的间隔时间。
	open_file_cache_min_uses 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。
	open_file_cache_errors指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。


server模块：1.包含location区段;2.指定日志参数（access_log,error_log）；3.指定监听的域名;4，指定错误页面（error_page）


location 模块：
语法规则： location [=|~|~*|^~] /uri/ { … }
= 开头表示精确匹配
^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可。nginx不对url做编码，因此请求为/static/20%/aa，可以被规则^~ /static/ /aa匹配到（注意是空格）。
~ 开头表示区分大小写的正则匹配
~*  开头表示不区分大小写的正则匹配
!~和!~*分别为区分大小写不匹配及不区分大小写不匹配 的正则
/ 通用匹配，任何请求都会匹配到。
多个location配置的情况下匹配顺序为（参考资料而来，还未实际验证，试试就知道了，不必拘泥，仅供参考）：
首先匹配 =，其次匹配^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。		



events模块：
	worker_connections 2048; 设置可由一个worker进程同时打开的最大连接数
	multi_accept on; 收到一个新连接通知后接受尽可能多的连接
	use epoll ;    设置用于复用客户端线程的轮询方法 
	 accept_mutex on;使每个可用的worker进程逐个接受新连接,默认情况下，该标志设置为on,如果accept_mutex为off，所有可用的worker将从等待状态唤醒，但只有一个worker处理连接。 这导致惊群现象，每秒重复多次。 这种现象导致服务器性能下降，因为所有被唤醒的worker都在占用CPU时间。 这导致增加了非生产性CPU周期和未使用的上下文切换。
	 accept_mutex_delay 500ms;当启用accept_mutex时，只有一个具有互斥锁的worker程序接受连接，而其他工作程序则轮流等待。 accept_mutex_delay对应于worker等待的时间帧，然后它尝试获取互斥锁并开始接受新的连接。 默认值为500毫秒.



