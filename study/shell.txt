（1）$(id -u) = 0 判断是否为root用户

（2）$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
exit（0）：正常运行程序并退出程序；

exit（1）：非正常运行导致退出程序；

(3)文件测试:
-e 文件名  	如果文件存在则为真
-r 文件名		如果文件存在且可读则为真
-w 文件名		如果文件存在且可写则为真
-x 文件名		如果文件存在且可执行则为真
-s 文件名		如果文件存在且至少有一个字符则为真
-d 文件名		如果文件存在且为目录则为真
-f 文件名		如果文件存在且为普通文件则为真
-c 文件名		如果文件存在且为字符型特殊文件则为真
-b 文件名		如果文件存在且为块特殊文件则为真
-L 		判断文件是否为符号链接

(4)2>&1 的意思就是将标准错误重定向到标准输出。这里标准输出已经重定向到了 /dev/null。那么标准错误也会输出到/dev/null
ls 2>1测试一下，不会报没有2文件的错误，但会输出一个空的文件1；
ls xxx 2>1测试，没有xxx这个文件的错误输出到了1中；
ls xxx 2>&1测试，不会生成1这个文件了，不过错误跑到标准输出了；
ls xxx >out.txt 2>&1, 实际上可换成 ls xxx 1>out.txt 2>&1；重定向符号>默认是1,错误和输出都传到out.txt了。

(5)command 1 | command 2
他的功能是把第一个命令command 1执行的结果作为command2的输入传给command 2

(6)command1  && command2
&&左边的命令（命令1）返回真(即返回0，成功被执行）后，&&右边的命令（命令2）才能够被执行；换句话说，“如果这个命令执行成功&&那么执行这个命令”。

(7)command1 || command2
||则与&&相反。如果||左边的命令（command1）未执行成功，那么就执行||右边的命令（command2）；或者换句话说，“如果这个命令执行失败了||那么就执行这个命令。

(8)sed -i 's/#web/web/g' a.txt  修改‘#web’变成为 ‘web’
sed -i '$i  #This is a test' a.txt    在最后一行插入"#This is a test"
sed -i '17i/abxc' a.conf   在17行后面增加 字符串

-i 直接修改读取的文件内容，而不是输出到终端
-n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。
-e ：直接在命令列模式上进行 sed 的动作编辑；
-f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作；
-r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法)


（9）useradd -s /sbin/nologin -g www www  添加用户，并且禁止登陆

（10）EOF只是一个分界符，在该分界符以后的内容都被当作输入，直到shell又看到该分解符(位于单独一行)

(11) []和test ; [[ ]] 支持字符串的模式匹配,不要吝啬空格,比用[ ... ]更能防止脚本里的许多逻辑错误

(12) 关系运算
!	非运算，表达式为 true 则返回 false，否则返回 true。	[ ! false ] 返回 true。
-o	或运算，有一个表达式为 true 则返回 true。	[ $a -lt 20 -o $b -gt 100 ] 返回 true。
-a	与运算，两个表达式都为 true 才返回 true。	[ $a -lt 20 -a $b -gt 100 ] 返回 false。


（13）逻辑运算
&&	逻辑的 AND	[[ $a -lt 100 && $b -gt 100 ]] 返回 false
||	逻辑的 OR	[[ $a -lt 100 || $b -gt 100 ]] 返回 true

（14）字符串运算符
=	检测两个字符串是否相等，相等返回 true。	[ $a = $b ] 返回 false。
!=	检测两个字符串是否相等，不相等返回 true。	[ $a != $b ] 返回 true。
-z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。
-n	检测字符串长度是否为0，不为0返回 true。	[ -n "$a" ] 返回 true。
str	检测字符串是否为空，不为空返回 true。	[ $a ] 返回 true。

（15）导入系统环境命令路径
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH

(16)shopt [-psu] [optname …]
-s 开启某个选项.
-u 关闭某个选项.
-p 列出所有可设置的选项.

使用内置的set和shopt命令设置bash选项
    set命令可以用来定制shell环境，使用选项“o”来打开或者关闭选项。例如打开选项：set -o 选项，关闭选项目：set +o 选项。


(17) sleep 3 等待三秒

（18）chown -R www:www ${Default_Website_Dir}  更改目录的拥有者和用户组

（19） tar jxf  .tar.bz2   解压 bz2文件

（20）read命令作用：从标准输入中读取一行，并把输入行的每个字段的值指定给shell变量
-p 后面跟提示信息，即在输入前打印提示信息。
-s 安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。
-n 后跟一个数字，定义输入文本的长度，很实用。
-n 后跟一个数字，定义输入文本的长度，很实用。


(21)dconfig的主要用途：

默认搜寻/lilb和/usr/lib，以及配置文件/etc/ld.so.conf内所列的目录下的库文件。

搜索出可共享的动态链接库，库文件的格式为：lib***.so.**，进而创建出动态装入程序(ld.so)所需的连接和缓存文件。

缓存文件默认为/etc/ld.so.cache，该文件保存已排好序的动态链接库名字列表。

ldconfig通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。


（22） chgrp -R mariadb /usr/local/mariadb/.  改变指定目录以及其子目录下的所有文件的群组属性 
chgrp -v bin log2012.log		改变文件的群组属性 

(23)ln -sf   a b   b—>a即b 指向a


(24)  hostnamectl set-hostname test
centos7  设置主机名，无需启动

(25)chattr :
 + 增加属性
 - 移除属性
 = 更新参数设定

(26)  EOF 的使用
新建文件并追加文字内容
cat <<EOF >a.conf
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF

实现已有文件并添加内容
cat <<EOF >>a.conf
[Zend ZendGuard Loader]
zend_extension=/usr/local/zend/ZendGuardLoader.so
zend_loader.enable=1
zend_loader.disable_licensing=0
zend_loader.obfuscation_level_support=3
zend_loader.license_path=
EOF




将配置内容写入配置文件



(27) 在某一行后面增加要插入的行
sed -i '/123/a\ppp' a.sh  就是在123的后面增加'ppp'字符串



() echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all
使对方无法ping